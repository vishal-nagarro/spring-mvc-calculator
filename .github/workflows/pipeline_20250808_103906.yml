# NexOps CI - Java/Spring MVC Pipeline

name: "NexOps CI - Java/Spring MVC Pipeline"

on:
  push:
    branches:
      - nexops-pipeline_20250808_103906
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn -B clean install --file pom.xml

      - name: Run JUnit tests
        run: mvn test --file pom.xml

      - name: Archive build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: target/*.jar

  publish:
    name: Publish Artifact to JFrog Artifactory
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact

      - name: Publish to JFrog Artifactory
        # Assumes credentials are stored in repo secrets: ARTIFACTORY_URL, ARTIFACTORY_USER, ARTIFACTORY_PASSWORD
        run: |
          curl -u"${{ secrets.ARTIFACTORY_USER }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
            -T app-artifact/*.jar \
            "$ARTIFACTORY_URL/${{ github.sha }}/"
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}

  sonar:
    # Only runs if sonar-project.properties exists (repo-level check)
    if: ${{ exists('sonar-project.properties') }}
    name: SonarQube Analysis
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
                          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
                          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

# Best practices:
# - Steps strictly follow requirements and repository analysis
# - No extraneous jobs or code
# - Secrets handled via GitHub settings
